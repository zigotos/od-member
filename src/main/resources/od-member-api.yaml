openapi: 3.0.1
info:
  title: Membres
  description: Gestion des membres de Odoru
  version: "1.0"
servers:
- url: http://localhost:8081
  description: Generated server url
paths:
  /members/{username}:
    get:
      tags:
      - member-controller
      summary: Récuperer le membre grace a son nom d'utilisateur
      operationId: getUser
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MemberDto'
        "404":
          description: Membre inconnu
    put:
      tags:
      - member-controller
      summary: Modifier un membre
      operationId: putUser
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberDto'
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Nom d'utilisateur deja pris
        "404":
          description: Membre inexistant
  /members:
    get:
      tags:
      - member-controller
      summary: Récuperer l'ensemble des membres
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberDto'
        "404":
          description: Aucuns membres existants
    post:
      tags:
      - member-controller
      summary: Ajouter un membre
      operationId: postUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberDto'
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Utilisateur deja présent
  /members/{username}/courses:
    get:
      tags:
      - member-controller
      summary: Récuperer les cours d'un membre avec son nom d'utilisateur
      operationId: getCourses
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDto'
        "404":
          description: Membre inconnu
  /members/{username}/competitions:
    get:
      tags:
      - member-controller
      summary: Récuperer les compétitions d'un membre avec son nom d'utilisateur
      operationId: getCompetitions
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDto'
        "404":
          description: Membre inconnu
  /members/levelGreater/{level}:
    get:
      tags:
      - member-controller
      summary: Recupérer les utilisateur d'un certain niveau
      operationId: getUsersWithLevelGreater
      parameters:
      - name: level
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberDto'
  /members/id/{idMember}:
    get:
      tags:
      - member-controller
      summary: Récuperer le membre grace a son identifiant
      operationId: getUserWithId
      parameters:
      - name: idMember
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MemberDto'
        "404":
          description: Membre inconnu
components:
  schemas:
    MemberDto:
      type: object
      properties:
        id:
          type: string
          description: Identifiant unique des membres
          readOnly: true
        firstName:
          type: string
          description: Prenom
        lastName:
          type: string
          description: Nom de famille
        mail:
          type: string
          description: Email
        username:
          type: string
          description: Nom d'utilisateur
        password:
          type: string
          description: Mot de passe
        address:
          type: string
          description: Adresse
        roles:
          type: array
          description: Roles de l'utilisateur
          items:
            type: string
            description: Roles de l'utilisateur
            enum:
            - MEMBRE
            - SECRETAIRE
            - ENSEIGNANT
            - PRESIDENT
          enum:
          - MEMBRE
          - SECRETAIRE
          - ENSEIGNANT
          - PRESIDENT
        level:
          type: integer
          description: Niveau du membre
          format: int32
        medicalCertificateState:
          type: string
          description: Etat du certificat médical
          enum:
          - EN_ATTENTE
          - RETARD
          - VERIFICATION
          - TRAITE
        duesState:
          type: string
          description: Etat du payement
          enum:
          - EN_ATTENTE
          - RETARD
          - VERIFICATION
          - TRAITE
    CourseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        level:
          type: integer
          format: int32
        slot:
          $ref: '#/components/schemas/Slot'
        teacher:
          type: string
        locality:
          type: string
        presence:
          type: boolean
        result:
          type: number
          format: double
        type:
          type: string
    Slot:
      type: object
      properties:
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        termInMinutes:
          type: integer
          format: int32
